using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    class Snake: Figure //указывает на то что класс"Snake" является наследником (производной )(диреванивом) класса "Figure"
                       //на этом основании класс "Snake" имеет доступ к переменным (полям) и методам класса "Figure"
                      //класс "Snake" будет отвечать за  движения змейки : в лево, в право, в верх , в низ.
    {
        //поля класса : конечная точка (tail)-хвост, длинна (leagnt, направление движения(direction)

        public Direction direction;//обьявляем  что класс "Snake" будет содержать (хранить) в себе данные о направлении в котором будет двигаться змейка
                           //получать их будет через конструктор (крайне правая переменная)
        
            //--------------------------------------------------конструктор класса Snake -------(один из методов класса)---------------------------------------------------------------------------
        public Snake(Point tail/*хвост(координаты последней точки)*/, int leagnt/*длинна (количество точек)*/, Direction _direction/*направление*/)//конструктор класса 
        {

            direction = _direction;//принимаем из конструктора переменную (типа Direction "enum" список) и переприсваеваем ее далее переменной "direction" 
                                  //и имеем возможность использовать ее далее во всех методах в нутри класса "Snake"


            pList = new List<Point>();//создаем список "pList" который будет содержать в себе элементы типа "Point" -точка

            //.............................................................................
            for(int i=0; i < leagnt; i++)// цикл для заполнения списка "pList" координатами змейки с заданным направлением и длинной в одно из четырех направлений
            {
                Point p = new Point(tail);// создание обьекта класса "Point" со вторым  конструктором котрорый разбирает точку на координаты
                p.Move(i, direction);//вызов метода "Move" входящего в состав класса "Point", который сдвигает точку (в лево , в право, в верх , в низ)  
                pList.Add(p);//заполняем список точками со здвинутыми коортинатами (направленными в одном из четырех направлений)
            }
            //.............................................................................
        }
        //-------------------------------------------------------------------------конец конструктора-------------------------------------------------------------------------------


        //-------------------------------------------------------метод -------------------------------------------------------------------------------------------------
        internal void Move()
        {

            Point Tail = pList.First(); // присваиваем точке "Tail" параметры такиеже как и у точки стоящей первой в списке "pList"
            pList.Remove(Tail); //удаляем эту точку
            Point head = GetNextPoint();
            pList.Add(  head    );

            Tail.Clear();
            head.Draww();


        }
        //--------------------------------------------------------------------------------------------------------------------------------------------------------


        //-------------------------------------------------------метод -------------------------------------------------------------------------------------------------
        public Point GetNextPoint()
        {

            Point head  = pList.Last(); // присваиваем точке "head" параметры такие же как и у точки стоящей последней в списке "pList"
            Point NextPoint  = new Point(head);
            NextPoint.Move(1, direction);

            return NextPoint;


        }
        //--------------------------------------------------------------------------------------------------------------------------------------------------------

        //-------------------------------------------------------метод -------------------------------------------------------------------------------------------------
        public void HandleKey(ConsoleKey key)// реакция на нажатия клавишь (Влево, Вправо, Вниз , Вверх)

        {
            if (key == ConsoleKey.LeftArrow)
                direction = Direction.LEFT;
            else if (key == ConsoleKey.RightArrow)
                direction = Direction.RIGHT;
            else if (key == ConsoleKey.DownArrow)
                direction = Direction.DOWN;
            else if (key == ConsoleKey.UpArrow)
                direction = Direction.UP;
        }
        //--------------------------------------------------------------------------------------------------------------------------------------------------------


        //-------------------------------------------------------  метод   внутренний ------------------------------------------------------------------------------
        internal bool Eat( Point food   )
        {
             Point head = GetNextPoint();
            if (head.IsHit(food))
            {
                food.sym = head.sym;
                pList.Add(food);

                return true;
            }
            else
                return false;


        }
        //--------------------------------------------------------------------------------------------------------------------------------------------------------

    }
}
